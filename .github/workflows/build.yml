name: "build"
on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest, macos-11]
        include:
          - os: windows-latest
            opts: -nsis
            filename: uplink-amd64-installer.exe
          - os: ubuntu-20.04
            filename: uplink
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Get Short SHA
        id: commit
        uses: benjlevesque/short-sha@v2.1
        with:
          length: 6

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: "^1.18"

      - name: Get Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install Linux deps
        if: runner.os == 'Linux'
        run: sudo apt-get install libgtk-3-dev libwebkit2gtk-4.0-dev

      - name: Install NSIS
        if: runner.os == 'Windows'
        run: choco install --yes nsis

      - name: Install create-dmg
        if: runner.os == 'macOS'
        run: |
          npm install --global create-dmg
          brew install graphicsmagick imagemagick

      - name: Build with Wails
        run: wails build ${{ matrix.opts }} -ldflags "-X 'main.version=${{ steps.commit.outputs.sha }}'"

      - name: Create DMG
        if: runner.os == 'macOS'
        run: create-dmg ./build/bin/Uplink.app ./build/bin
        continue-on-error: true

      - name: Rename DMG
        if: runner.os == 'macOS'
        run: mv ./build/bin/Uplink*.dmg './build/bin/Uplink-${{ steps.commit.outputs.sha }}.dmg'

      - name: Upload Artifacts
        if: runner.os != 'macOS'
        uses: actions/upload-artifact@v3
        with:
          name: uplink-latest
          path: build/bin/${{ matrix.filename }}
          retention-days: 14

      - name: Upload DMG
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v3
        with:
          name: uplink-latest
          path: build/bin/Uplink-${{ steps.commit.outputs.sha }}.dmg
          retention-days: 14

  upload:
    name: Upload Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: Upload Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          title: "Latest Master Build"
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          files: uplink-latest/*
          automatic_release_tag: "latest"
          prerelease: false
